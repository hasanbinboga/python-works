# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18tG5Z8-d5-LXjndPTHXDqFqk5Gv_nSI6

Kütüphaneleri ekledik.
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense
import matplotlib.pyplot as plt
import files

"""CSV dosyasını upload et ve oku"""

df = pd.read_csv('Linux.csv')

"""Veriyi incele"""

print(df.head())

"""Veriyi dönüştür"""

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df['Value'].values.reshape(-1, 1))

"""Eğitim ve test setlerini ayır"""

train_size = int(len(scaled_data) * 0.67)
test_size = len(scaled_data) - train_size
train, test = scaled_data[0:train_size, :], scaled_data[train_size:len(scaled_data), :]

"""# Eğitim ve test setlerini X ve y olarak böl"""

def create_dataset(dataset, time_step=1):
    X, y = [], []
    for i in range(len(dataset) - time_step - 1):
        a = dataset[i:(i + time_step), 0]
        X.append(a)
        y.append(dataset[i + time_step, 0])
    return np.array(X), np.array(y)

time_step = 1
X_train, y_train = create_dataset(train, time_step)
X_test, y_test = create_dataset(test, time_step)

"""LSTM modeli oluştur"""

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(time_step, 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

"""Modeli eğit"""

model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100, batch_size=64, verbose=1)

"""Tahminleri yap"""

train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

"""Ters dönüşüm"""

train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)

"""Gerçek veriyi de ters dönüşüm yap"""

y_train = scaler.inverse_transform([y_train])
y_test = scaler.inverse_transform([y_test])

"""Eğitim seti için performans ölçümü"""

train_score = np.sqrt(np.mean(np.square(y_train[0] - train_predict[:, 0])))
print('Train Score: %.2f RMSE' % (train_score))

"""Test seti için performans ölçümü"""

test_score = np.sqrt(np.mean(np.square(y_test[0] - test_predict[:, 0])))
print('Test Score: %.2f RMSE' % (test_score))

"""Eğitim ve test verilerini plotla"""

plt.plot(scaler.inverse_transform(scaled_data), label='Original Data')
plt.plot(np.arange(time_step, len(train_predict) + time_step), train_predict, label='Train Prediction')
plt.plot(np.arange(len(train_predict) + (time_step * 2) + 1, len(scaled_data) + 1), test_predict, label='Test Prediction')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.show()

print(test_predict.shape)
print(np.arange(len(train_predict) + (time_step * 2) + 1, len(scaled_data) + 1).shape)